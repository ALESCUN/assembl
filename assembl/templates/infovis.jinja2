{% extends "base.jinja2" %}

{% block content %}
<div id="infovis" width="100%" height="100%">
</div>
<div id="inner-details"></div>
{% endblock %}

{% block extra_css %}
<link rel="stylesheet" type="text/css" href="{{ STATIC_URL }}css/lib/jit/base.css" />
<link rel="stylesheet" type="text/css" href="{{ STATIC_URL }}css/lib/jit/Hypertree.css" />

<style media="screen" type="text/css">
#infovis {background: white;}
</style>

{% endblock %}

{% block extra_js %}
<script type="text/json" id="ideas-json">{{ discussion.root_idea.generic_json("idea_graph_jit", use_dumps=True) |safe }}</script>
<script type="text/javascript">
requirejs(["jit"], function($jit) {
  var script = document.getElementById("ideas-json");
  var json = JSON.parse(script.textContent);
  var div = document.getElementById("infovis");
  var ht = new $jit.Hypertree({
    //id of the visualization container  
    injectInto: 'infovis',  
    //canvas width and height  
    width: div.width,  
    height: div.height,
    //Change node and edge styles such as  
    //color, width and dimensions.  
    Node: {  
        dim: 9,  
        color: "#a9a3c1"  
    },  
    Edge: {  
        lineWidth: 2,  
        color: "#c7c2dd"  
    },  
    onBeforeCompute: function(node){  
        console.log("centering");  
    },  
    //Attach event handlers and add text to the  
    //labels. This method is only triggered on label  
    //creation  
    onCreateLabel: function(domElement, node){  
        domElement.innerHTML = node.name;  
        $jit.util.addEvent(domElement, 'click', function () {  
            ht.onClick(node.id, {  
                onComplete: function() {  
                    ht.controller.onComplete();  
                }  
            });  
        });  
    },  
    //Change node styles when labels are placed  
    //or moved.  
    onPlaceLabel: function(domElement, node){  
        var style = domElement.style;  
        style.display = '';  
        style.cursor = 'pointer';  
        if (node._depth <= 1) {  
            style.fontSize = "1.1em";  
            style.color = "#111";  
    
        } else if(node._depth == 2){  
            style.fontSize = "0.9em";  
            style.color = "#333";  
    
        } else {  
            style.display = 'none';  
        }  
    
        var left = parseInt(style.left);  
        var w = domElement.offsetWidth;  
        style.left = (left - w / 2) + 'px';  
    },  
      
    onComplete: function(){  
        console.log("done");  
          
        //Build the right column relations list.  
        //This is done by collecting the information (stored in the data property)   
        //for all the nodes adjacent to the centered node.  
        var node = ht.graph.getClosestNodeToOrigin("current");
        var html = "<h4>" + node.name + "</h4><b>Connections:</b>";
        if (window.callerApp !== undefined) {
            var idea = callerApp.ideaList.ideas.get(node.id);
            if (idea !== undefined) {
                callerApp.setCurrentIdea(idea);
            }
        }
        html += "<ul>";  
        node.eachAdjacency(function(adj){  
            var child = adj.nodeTo;  
            if (child.data) {  
                var rel = (child.data.band == node.name) ? child.data.relation : node.data.relation;  
                html += "<li onmouseup='setIdea(\""+child.id+"\");'>" + child.name+"</li>";  
            }  
        });
        html += "</ul>";  
        $jit.id('inner-details').innerHTML = html;  
    }  
  });  
  //load JSON data.  
  ht.loadJSON(json);  
  window.setIdea = function(id) {
    ht.onClick(id, {  
        onComplete: function() {  
            ht.controller.onComplete();  
        }  
    });
  };
  //compute positions and plot.  
  ht.refresh();
});
</script>

{% endblock %}
